// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum Brands {
  Xiaomi
  Samsung
  Apple
  Honor
  Motorola
  Realme
}

model CategoryBrand {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id              String @id @default(uuid())
  title           String
  description     String
  characteristics String
  inStock         Int
  price           Float  @default(0)
  slug            String @unique
  brand           Brands

  categoryBrand   CategoryBrand @relation(fields: [categoryBrandId], references: [id])
  categoryBrandId String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String
  role          Role         @default(user)
  image         String?
  address       UserAddress?
  Order         Order[]
}

model Country {
  id           String         @id @unique
  name         String
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  city       String
  postalCode String
  phone      String

  //relations
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

// Shopping order
model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  taxes        Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  //relations
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  //relations
  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  //relations
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
